plugins {
    id 'java'
    id 'maven-publish'
    id 'io.papermc.hangar-publish-plugin' version '0.1.3'
    id 'com.modrinth.minotaur' version '2.8.7'
}

allprojects {
    group = 'com.darksoldier1404'
    version = '4.0.6.31'
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url System.getenv("REPO_PUBLIC") ?: getProperty("REPO_PUBLIC")
            allowInsecureProtocol = true
        }
        maven { url 'https://repo.bstats.org/repository/releases/' }
        maven { url 'https://repo.extendedclip.com/releases/' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'io.papermc.hangar-publish-plugin'
    apply plugin: 'com.modrinth.minotaur'

    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
        compileOnly 'org.bstats:bstats-bukkit:3.0.0'
        compileOnly 'me.clip:placeholderapi:2.11.6'
        compileOnly 'com.mojang.authlib:authlib:4.0.43@jar'
        compileOnly 'com.mojang:brigadier:1.1.8@jar'
        compileOnly 'com.mojang.datafixers:datafixerupper:6.0.8@jar'
        compileOnly 'com.earth2me.essentials:EssentialsX:2.20.1@jar'
        compileOnly 'net.luckperms:LuckPerms:5.4.134@jar'
        compileOnly 'com.sk89q.worldedit:WorldEdit:7.3.1@jar'
        compileOnly 'com.sk89q.worldguard:WorldGuard:7.0.9:dist@jar'
        compileOnly 'com.github.philippheuer.events4j:events4j-api:0.10.0'
        compileOnly 'com.github.philippheuer.events4j:events4j-core:0.10.0'
        compileOnly 'com.github.philippheuer.events4j:events4j-handler-simple:0.10.0'
        compileOnly 'com.github.vladimir-bukhtoyarov:bucket4j:7.5.0'
        compileOnly 'io.socket:socket.io-client:1.0.0'
        compileOnly 'io.reactivex.rxjava2:rxjava:2.1.16'
        compileOnly 'org.jsoup:jsoup:1.13.1'
        compileOnly 'com.googlecode.json-simple:json-simple:1.1.1'
    }

    test {
        useJUnitPlatform()
    }

//    modrinth {
//        // Validate required properties
//        if (!project.hasProperty('modrinthApiKey') || !project.hasProperty('modrinthProjectId')) {
//            throw new GradleException('modrinthApiKey and modrinthProjectId must be specified in gradle.properties or as project properties.')
//        }
//
//        token = project.property('modrinthApiKey')
//        projectId = project.property('modrinthProjectId')
//        versionNumber = project.version
//        versionName = project.hasProperty('modrinthVersionTitle') ? project.property('modrinthVersionTitle') : "Release ${project.version}"
//        versionType = 'release'
//        // Defer file resolution to task execution time
//        uploadFile = project.provider {
//            def jarFile = file("${rootDir}/jars/DPP-Core-${project.name}-${project.version}-SNAPSHOT.jar")
//            logger.lifecycle("Checking for JAR: ${jarFile}")
//            if (!jarFile.exists()) {
//                throw new GradleException("Modrinth upload file does not exist: ${jarFile}")
//            }
//            jarFile
//        }
//        gameVersions = [project.name.replace('_', '.')] // e.g., 1_14_4 -> 1.14.4
//        loaders = ['paper']
//        changelog = "Release for ${project.version} on Minecraft ${project.name.replace('_', '.')}"
//        dependencies = []
//
//        // Optional: Use staging API for testing
//        debugMode = project.hasProperty('modrinthDebug') ? project.property('modrinthDebug').toBoolean() : false
//    }

    tasks.modrinth.doFirst {
        def upload = file("${rootDir}/jars/DPP-Core-${project.name}-SNAPSHOT.jar")
        logger.lifecycle("Preparing to upload JAR: ${upload}")
        if (!upload.exists()) {
            throw new GradleException("Upload file does not exist: ${upload}")
        }
    }

    tasks.register('renameJar') {
        def jarDir = file("$rootDir/jars")
        def moduleName = project.name
        def jarFileName = "DPP-Core-${moduleName}-${version}-SNAPSHOT.jar"
        def newJarFileName = "DPP-Core-${moduleName}-SNAPSHOT.jar"
        def originalJar = file("${jarDir}/${jarFileName}")
        def newJar = file("${jarDir}/${newJarFileName}")
        doLast {
            if (originalJar.exists()) {
                originalJar.renameTo(newJar)
                println "JAR file renamed: ${newJarFileName}"
            } else {
                throw new GradleException("Original JAR file does not exist: ${jarFileName}")
            }
        }
    }

    jar {
        destinationDirectory.set(file("$rootDir/jars"))
        archiveFileName.set("DPP-Core-${project.name}-${version}-SNAPSHOT.jar")
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = 'com.darksoldier1404.dppc'
                artifactId = "DPP-Core"
                artifact file("$rootDir/jars/DPP-Core-${project.name}-SNAPSHOT.jar")
                version = "${project.name}-SNAPSHOT"
            }
        }
        repositories {
            maven {
                url System.getenv("REPO_DPP") ?: getProperty("REPO_DPP")
                allowInsecureProtocol = true
            }
        }
    }

    hangarPublish {
        publications {
            register("publishPluginPublicationToHangar") {
                version = project.version.toString()
                channel = "Snapshot"
                id = "DPP-Core"
                apiKey = System.getenv("HANGAR_API_TOKEN")

                platforms {
                    paper {
                        url = "https://github.com/darksoldier1404/DPP-Core/releases"
                        platformVersions = List.of("1.14.4", "1.15.2", "1.16.5", "1.17.1", "1.18.2", "1.19.4", "1.20.1", "1.20.6", "1.21.4", "1.21.5", "1.21.6")
                        dependencies {
                            hangar("Essentials") {
                                required = false
                            }
                            hangar("PlaceholderAPI") {
                                required = false
                            }
                            url("WorldGuard", "https://dev.bukkit.org/projects/worldguard/files") {
                                required.set(false)
                            }
                            url("LuckPerms", "https://luckperms.net/download") {
                                required.set(false)
                            }
                        }
                    }
                }
            }
        }
    }
}